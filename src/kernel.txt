SELECT *
FROM Customers;

INSERT INTO Sales
VALUES(ProductId, CustomerId, Amount);

public class PaymentService{
    public IGateway _gateway;

    public PaymentService(){
        _gateway = services.GetService(IGateway);
    }
}

const toggleUi = function(){
    main.visible = false;
}

import { DoStuff } 
	from './stuffdoer.js';

"use strict"

private List<User> GetUsers()
{
    return _userRepository.GetAll().ToList();
}

GC.Collect();

import sql;

def getApiStatus():
    return _healthCheckService.Status();

pip install requirements.txt

UPDATE Users SET Active=1 WHERE Id=9;

public class InvoiceService:IInvoiceService{

    IInvoiceRepository _invoiceRepository;

    public InvoiceService(IInvoiceRepository invoiceRepository ){
        _invoiceRepository =invoiceRepository;
    }

    public Invoice GetInvoice(long id)
    {
        return _invoiceRepository.Get(id);
    }
}

public class InvoiceUnitTest
{

    [Test]
    public void CanGetInvoice(){
        Assert.NotNull(_invoiceService.GetInvoice(1));
    }
}

 if ((Test-Path ".git") -eq $TRUE) {
        return $TRUE
    }


  if (!$path) {
        cd \git
    }
    else {
        cd $path
    }

    subscribe: function () {
        if (this.money < this.boardSubscriptionPrice) {
          this.log(Messages.not_enough_money);
        }
        this.achievements.boughtFreelanceSubscr.done = true;
        this.money -= this.boardSubscriptionPrice;
        this.stats.moneySpent += this.boardSubscriptionPrice;
      },


function isAGitDir() {
    if ((Test-Path ".git") -eq $TRUE) {
        return $TRUE
    }
    return $FALSE
}

function gitCheck($path) {

    $table = New-Object system.Data.DataTable “theTable”
    $col1 = New-Object system.Data.DataColumn Directory, ([string])
    $col2 = New-Object system.Data.DataColumn Branch, ([string])
    $table.columns.add($col1)
    $table.columns.add($col2)

    if (!$path) {
        cd \git
    }
    else {
        cd $path
    }
	
    foreach ($dir in ls -directory) {
	
        cd $dir.name	
		
        $row = $table.NewRow()
        $row.Directory = $dir.name	
        $isAGitDir = isAGitDir;
	
        if ($isAGitDir) {
            $branch = git rev-parse --abbrev-ref HEAD
            $row.Branch = $branch
        }
        else {
            $row.Branch = "NOT A GIT DIR"
        }
		
        $table.Rows.Add($row)

        cd ..
    }
	
    cls
    $table | format-table -AutoSize 
}

ECHO "Retrieving the info..."

gitCheck

Read-Host -Prompt "Press Enter to exit"